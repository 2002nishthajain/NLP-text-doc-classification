Code,Language
"class ComplexClass:\n    def __init__(self, x):\n        self.x = x\n\n    def double_value(self):\n        return self.x * 2\n\nc = ComplexClass(5)\nresult = c.double_value()\nprint(result)","Python"
"def recursive_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * recursive_factorial(n - 1)\n\nresult = recursive_factorial(5)\nprint(result)","Python"
"def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    middle = len(arr) // 2\n    left = arr[:middle]\n    right = arr[middle:]\n    return merge(mergeSort(left), mergeSort(right))\n\ndef merge(left, right):\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n\n    while leftIndex < len(left) and rightIndex < len(right):\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n    result.extend(left[leftIndex:])\n    result.extend(right[rightIndex:])\n\n    return result\n\narr = [38, 27, 43, 3, 9, 82, 10]\nresult = mergeSort(arr)\nprint('Sorted array:', result)","Python"
"def recursive_power(base, exponent):\n    if exponent == 0:\n        return 1\n    elif exponent % 2 == 0:\n        half_pow = recursive_power(bse, exponent // 2)\n        return half_pow * half_pow\n    else:\n        return base * recursive_power(base, exponent - 1)\n\nresult = recursive_power(2, 5)\nprint(result)","Python"
"class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display(self):\n        print(f'Name: {self.name}, Age: {self.age}')\n\nstudent1 = Student('Alice', 20)\nstudent2 = Student(\'Bob\', 22)\nstudent1.display()\nstudent2.display()","Python"
"def binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\narr = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\nresult = binarySearch(arr, target)\nprint(\'Binary Search Result:\', result)","Python"
"class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width)\n\nrectangle = Rectangle(5, 3)\narea = rectangle.area()\nperimeter = rectangle.perimeter()\nprint(f\'Area: {area}, Perimeter: {perimeter}\')","Python"
"def prime_factors(n):\n    factors = []\n    divisor = 2\nn\n    while divisor <= n:\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n\n    return factors\n\nresult = prime_factors(48)\nprint(\'Prime Factors:\', result)","Python"
"def recursive_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + recursive_sum(n - 1)\n\nresult = recursive_sum(10)\nprint(result)","Python"
"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nresult = binomial_coefficient(5, 2)\nprint(result)","Python"
"class ComplexClass:\n    def __init__(self, x):\n        self.x = x\n\n    def double_value(self):\n        return self.x * 2\n\nc = ComplexClass(5)\nresult = c.double_value()\nprint(result)","Python"
"def recursive_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * recursive_factorial(n - 1)\n\nresult = recursive_factorial(5)\nprint(result)","Python"
"def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    middle = len(arr) // 2\n    left = arr[:middle]\n    right = arr[middle:]\n    return merge(mergeSort(left), mergeSort(right))\n\ndef merge(left, right):\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n\n    while leftIndex < len(left) and rightIndex < len(right):\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n    result.extend(left[leftIndex:])\n    result.extend(right[rightIndex:])\n\n    return result\n\narr = [38, 27, 43, 3, 9, 82, 10]\nresult = mergeSort(arr)\nprint('Sorted array:', result)","Python"
"def recursive_power(base, exponent):\n    if exponent == 0:\n        return 1\n    elif exponent % 2 == 0:\n        half_pow = recursive_power(bse, exponent // 2)\n        return half_pow * half_pow\n    else:\n        return base * recursive_power(base, exponent - 1)\n\nresult = recursive_power(2, 5)\nprint(result)","Python"
"class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display(self):\n        print(f'Name: {self.name}, Age: {self.age}')\n\nstudent1 = Student('Alice', 20)\nstudent2 = Student(\'Bob\', 22)\nstudent1.display()\nstudent2.display()","Python"
"def binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\narr = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\nresult = binarySearch(arr, target)\nprint(\'Binary Search Result:\', result)","Python"
"class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width)\n\nrectangle = Rectangle(5, 3)\narea = rectangle.area()\nperimeter = rectangle.perimeter()\nprint(f\'Area: {area}, Perimeter: {perimeter}\')","Python"
"def prime_factors(n):\n    factors = []\n    divisor = 2\nn\n    while divisor <= n:\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n\n    return factors\n\nresult = prime_factors(48)\nprint(\'Prime Factors:\', result)","Python"
"def recursive_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + recursive_sum(n - 1)\n\nresult = recursive_sum(10)\nprint(result)","Python"
"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nresult = binomial_coefficient(5, 2)\nprint(result)","Python"
"class ComplexClass:\n    def __init__(self, x):\n        self.x = x\n\n    def double_value(self):\n        return self.x * 2\n\nc = ComplexClass(5)\nresult = c.double_value()\nprint(result)","Python"
"def recursive_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * recursive_factorial(n - 1)\n\nresult = recursive_factorial(5)\nprint(result)","Python"
"def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    middle = len(arr) // 2\n    left = arr[:middle]\n    right = arr[middle:]\n    return merge(mergeSort(left), mergeSort(right))\n\ndef merge(left, right):\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n\n    while leftIndex < len(left) and rightIndex < len(right):\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n    result.extend(left[leftIndex:])\n    result.extend(right[rightIndex:])\n\n    return result\n\narr = [38, 27, 43, 3, 9, 82, 10]\nresult = mergeSort(arr)\nprint('Sorted array:', result)","Python"
"def recursive_power(base, exponent):\n    if exponent == 0:\n        return 1\n    elif exponent % 2 == 0:\n        half_pow = recursive_power(base, exponent // 2)\n        return half_pow * half_pow\n    else:\n        return base * recursive_power(base, exponent - 1)\n\nresult = recursive_power(2, 5)\nprint(result)","Python"
"class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display(self):\n        print(f'Name: {self.name}, Age: {self.age}')\n\nstudent1 = Student('Alice', 20)\nstudent2 = Student('Bob', 22)\nstudent1.display()\nstudent2.display()","Python"
"def binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\narr = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\nresult = binarySearch(arr, target)\nprint('Binary Search Result:', result)","Python"
"class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width)\n\nrectangle = Rectangle(5, 3)\narea = rectangle.area()\nperimeter = rectangle.perimeter()\nprint(f'Area: {area}, Perimeter: {perimeter}')","Python"
"def prime_factors(n):\n    factors = []\n    divisor = 2\n\n    while divisor <= n:\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors\n\nresult = prime_factors(48)\nprint('Prime Factors:', result)","Python"
"def recursive_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + recursive_sum(n - 1)\n\nresult = recursive_sum(10)\nprint(result)","Python"
"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nresult = binomial_coefficient(5, 2)\nprint(result)","Python"
"class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def start(self):\n        print(f'Starting the {self.year} {self.make} {self.model}')\n\n    def stop(self):\n        print(f'Stopping the {self.year} {self.make} {self.model}')\n\ncar1 = Car('Toyota', 'Camry', 2022)\ncar2 = Car('Ford', 'Mustang', 2022)\ncar1.start()\ncar2.stop()","Python"
"def selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nselection_sort(arr)\nprint('Sorted array:', arr)","Python"
"class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14159 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14159 * self.radius\n\ncircle = Circle(4)\narea = circle.area()\ncircumference = circle.circumference()\nprint(f'Area: {area}, Circumference: {circumference}')","Python"